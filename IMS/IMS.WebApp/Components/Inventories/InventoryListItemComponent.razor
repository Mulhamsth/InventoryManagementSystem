@inject NavigationManager NavigationManager
@inject IDeleteInventoryUseCase DeleteInventoryUseCase
@if(Inventories != null && Inventories.Count > 0)
{
	foreach (var inv in Inventories)
	{
		<tr>
			<td>@inv.InventoryName</td>
			<td>@inv.Quantity</td>
			<td>@inv.Price.ToString("c")</td>
			<td>
				<button type="button" class="btn btn-success" @onclick="@(() => EditInventory(inv.InventoryId))">Edit</button>
				<button type="button" class="btn btn-danger" @onclick="@(() => DeleteInventory(inv))">Delete</button>
			</td>
		</tr>
	}

}

@code {

	[Parameter]
	public List<Inventory> Inventories { get; set; } = new List<Inventory>();
	private void EditInventory(int inventoryId)
	{
		NavigationManager.NavigateTo($"/editinventory/{inventoryId}");
	}
	[Parameter]
	public EventCallback<string> OnDeleteInventory { get; set; }
	private void DeleteInventory(Inventory inventory)
	{
		DeleteInventoryUseCase.ExecuteAsync(inventory);
		OnDeleteInventory.InvokeAsync();
	}


}
